package solitaire;

import java.io.IOException;
import java.util.Scanner;
import java.util.Random;

/**
 * This class implements a simplified version of Bruce Schneier's Solitaire Encryption algorithm.
 * 
 * Rahie Patel 
 * RU NB CS112
 */
public class Solitaire {
	
	/**
	 * Circular linked list that is the deck of cards for encryption
	 */
	CardNode deckRear;
	
	/**
	 * Makes a shuffled deck of cards for encryption. The deck is stored in a circular
	 * linked list, whose last node is pointed to by the field deckRear
	 */
	public void makeDeck() {
		// start with an array of 1..28 for easy shuffling
		int[] cardValues = new int[28];
		// assign values from 1 to 28
		for (int i=0; i < cardValues.length; i++) {
			cardValues[i] = i+1;
		}
		
		// shuffle the cards
		Random randgen = new Random();
 	        for (int i = 0; i < cardValues.length; i++) {
	            int other = randgen.nextInt(28);
	            int temp = cardValues[i];
	            cardValues[i] = cardValues[other];
	            cardValues[other] = temp;
	        }
	     
	    // create a circular linked list from this deck and make deckRear point to its last node
	    CardNode cn = new CardNode();
	    cn.cardValue = cardValues[0];
	    cn.next = cn;
	    deckRear = cn;
	    for (int i=1; i < cardValues.length; i++) {
	    	cn = new CardNode();
	    	cn.cardValue = cardValues[i];
	    	cn.next = deckRear.next;
	    	deckRear.next = cn;
	    	deckRear = cn;
	    }
	}
	
	/**
	 * Makes a circular linked list deck out of values read from scanner.
	 */
	public void makeDeck(Scanner scanner) 
	throws IOException {
		CardNode cn = null;
		if (scanner.hasNextInt()) {
			cn = new CardNode();
		    cn.cardValue = scanner.nextInt();
		    cn.next = cn;
		    deckRear = cn;
		}
		while (scanner.hasNextInt()) {
			cn = new CardNode();
	    	cn.cardValue = scanner.nextInt();
	    	cn.next = deckRear.next;
	    	deckRear.next = cn;
	    	deckRear = cn;
		}
	}
	
	/**
	 * Implements Step 1 - Joker A - on the deck.
	 */
	void jokerA() {
		//implement statement(for loop) to scan linked list for value of Joker A (27)
		//switch value of Joker A with value after it
		
		CardNode jokerA = deckRear.next;
		for(jokerA = deckRear.next; jokerA.cardValue != 27; jokerA = jokerA.next){
			if(jokerA.cardValue == 27){
				break;
			}
		}
		//finish switching both joker A and node next to it
		if(jokerA.next == deckRear.next){
			jokerA.cardValue = deckRear.next.cardValue;
			deckRear.next.cardValue = 27;
		}
		else {
			jokerA.cardValue = jokerA.next.cardValue;
			jokerA.next.cardValue = 27;
		}
		
	} 
		
				
	/**
	 * Implements Step 2 - Joker B - on the deck.
	 */
	void jokerB() {
	    //implement similar algorithm to one described for joker A.
		
		CardNode jokerB = deckRear.next;
		for(jokerB = deckRear.next; jokerB.cardValue != 28; jokerB = jokerB.next){
			if (jokerB.cardValue == 28){
				break;
			}
		}
		if (jokerB.next == deckRear.next ){
		
			jokerB.cardValue = deckRear.next.cardValue;
			deckRear.next.cardValue = deckRear.next.next.cardValue;
			deckRear.next.next.cardValue = 28;
		} 
		else if (jokerB.next == deckRear){
			jokerB.cardValue = deckRear.cardValue;
			deckRear.cardValue = deckRear.next.cardValue;
			deckRear.next.cardValue = 28;
		}
		else {
			jokerB.cardValue = jokerB.next.cardValue;
			jokerB.next.cardValue = jokerB.next.next.cardValue;
			jokerB.next.next.cardValue = 28;
		}
		
	
		
	}
			
	
	/**
	 * Implements Step 3 - Triple Cut - on the deck.
	 */
	void tripleCut() {
		CardNode ln = deckRear;
		for(CardNode cn = deckRear.next; cn != deckRear; cn = cn.next){
				if(cn.cardValue == 27 || cn.cardValue == 28){
					CardNode firstJoker = cn;
					for (CardNode pn = cn.next; pn != cn; pn = pn.next){
						if(pn.cardValue == 27 || pn.cardValue == 28){
							CardNode secondJoker = pn;
							CardNode secondNext = pn.next;
							CardNode front = deckRear.next;
							deckRear.next = firstJoker;
							secondJoker.next = front;
							deckRear = ln;
							deckRear.next = secondNext;
							break;
						}
						else {
							pn = pn.next;
						}
					}
				} else {
					ln = ln.next;
					cn = cn.next;
				}
		}
		if (deckRear.next.cardValue == 27){
			deckRear.cardValue = 28;
			
		}
		else if (deckRear.next.cardValue == 28){
			deckRear.cardValue = 27;
		} 
		else if (deckRear.cardValue == 28){
			deckRear.next.cardValue = 27;
		} 
		else if (deckRear.cardValue == 27){
			deckRear.next.cardValue = 28;
		}
	}		
				
	/**
	 * Implements Step 4 - Count Cut - on the deck.
	 */
	void countCut() {	
			int count = 0;
			int last = deckRear.cardValue;
			if (deckRear.cardValue == 28){
				count = 27;
			}
			else {
				count = deckRear.cardValue;
			}
			CardNode prev = new CardNode();
			//for loop to traverse through deck linked list
			for(CardNode ptr = deckRear.next; ptr != deckRear; ptr = ptr.next){
				prev = ptr;
			}
			prev.next = deckRear.next;
			deckRear = prev;
			CardNode next = deckRear;
			for(int i = 0; i < count; i ++){
				next = next.next;
			}
			CardNode newLast = new CardNode();
			newLast.cardValue = last;
			newLast.next = next.next;
			next.next = newLast;
			deckRear = newLast;
		
		}
	/**
	 * Gets a key. Calls the four steps - Joker A, Joker B, Triple Cut, Count Cut, then
	 * counts down based on the value of the first card and extracts the next card value 
	 * as key. But if that value is 27 or 28, repeats the whole process (Joker A through Count Cut)
	 * on the latest (current) deck, until a value less than or equal to 26 is found, which is then returned.
	 * 
	 * @return Key between 1 and 26
	 */
	int getKey() {
		printList(deckRear);
		int key;
		int frontValue = deckRear.next.cardValue;
		if (deckRear.next.cardValue == 28){
			frontValue = 27;
		}
		int ithValue = 1;
		//traverse linked list
		for (CardNode current = deckRear.next; current != deckRear; current = current.next){
			if(ithValue == frontValue){
				if(current.next.cardValue == 28){
					//repeat steps to get key in order for 28 to be deckRear.next.cardValue
					jokerA();
					jokerB();
					tripleCut();
					countCut();
					current = deckRear;
					frontValue = deckRear.next.cardValue;
					//reset ithValue counter
					ithValue = 0;
					if(frontValue == 28){
						frontValue = 27;
					}
				}
				else {
					key = current.next.cardValue;
					return key;
				}
			}
			ithValue ++;
		}
		 printList(deckRear);
	    return -1;
	}
	
	/**
	 * Utility method that prints a circular linked list, given its rear pointer
	 * 
	 * @param rear Rear pointer
	 */
	private static void printList(CardNode rear) {
		if (rear == null) { 
			return;
		}
		System.out.print(rear.next.cardValue);
		CardNode ptr = rear.next;
		do {
			ptr = ptr.next;
			System.out.print("," + ptr.cardValue);
		} while (ptr != rear);
		System.out.println("\n");
	}

	/**`
	 * Encrypts a message, ignores all characters except upper case letters
	 * 
	 * @param message Message to be encrypted
	 * @return Encrypted message, a sequence of upper case letters only
	 */
	public String encrypt(String message) {	
		// COMPLETE THIS METHOD
	    // THE FOLLOWING LINE HAS BEEN ADDED TO MAKE THE METHOD COMPILE
	    return null;
	}
	
	/**
	 * Decrypts a message, which consists of upper case letters only
	 * 
	 * @param message Message to be decrypted
	 * @return Decrypted message, a sequence of upper case letters only
	 */
	public String decrypt(String message) {	
		// COMPLETE THIS METHOD
	    // THE FOLLOWING LINE HAS BEEN ADDED TO MAKE THE METHOD COMPILE
	    return null;
	}
}
