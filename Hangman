package hangman;
import javax.swing.JOptionPane;
import java.awt.*;
import javax.swing.*;
	public class Hangman extends JComponent {

	    /**Rahie Patel
		 * game can be played and drawing will pop up, but game doesn't do anything to drawing
		 */
		private static final long serialVersionUID = 1L;
		JFrame frame = new JFrame("Hangman");
	    Container content = frame.getContentPane();
	   
	    public static void main(String[] args) {
	  
	        Hangman drawing = new Hangman();
	        drawing.setUp();
	        //player 1 inputs word
	        String response = JOptionPane.showInputDialog(null, "Enter a word that is a maximum of 6 letters: ");
	        int length = response.length();
	        //player 2 starts guessing letters
	        int correctLetterCounter = 0;
	        int incorrectLetterCounter = 0;
	        for(int letterCounter = 0; letterCounter < 10; letterCounter++){
	            String responseChar = JOptionPane.showInputDialog(null, "Guess a letter");
	            if(response.contains(responseChar)) {
	                JOptionPane.showMessageDialog(null, "Character guessed is correct.");
	                correctLetterCounter ++;
	                System.out.println("Correct: " + correctLetterCounter);
	            } else {
	                JOptionPane.showMessageDialog(null, "Character guessed is incorrect");
	                incorrectLetterCounter ++;
	                System.out.println("Incorrect: " + incorrectLetterCounter);
	            } if (correctLetterCounter == length){
	                JOptionPane.showMessageDialog(null, "You have correctly guessed all the letters in the word");
	                letterCounter = 11;
	            }
	        }   
	        System.out.println("Word: " + response);
	        //create counter to show what letters have been guessed
	        //create counter to show how many correct guesses
	        //create counter to show how many incorrect guesses
	        //organize the three counters to make it easier to understand
	        //for every incorrect letter guessed, draw body parts for the man
	    }
	    //graphics to draw hangman
	    public void setUp() {
	        content.setBackground(Color.WHITE);
	        content.add(this);
	        frame.setSize(1000, 560);
	        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	        frame.setVisible(true);
	    }
	    //Hangman Drawing
	    @Override
	    public void paintComponent(Graphics g) {
	        //Top Bar
	        int xpoints[] = {75,325,325,75};
	        int ypoints[] = {80,80,85,85};
	        g.fillPolygon(xpoints, ypoints, 4);
	        //Pole
	        int x2points[] = {325,330,330,325};
	        int y2points[] = {80,80,390,390};
	        g.fillPolygon(x2points, y2points, 4);
	        //Base
	        int x3points[] = {200,440,440,200};
	        int y3points[] = {390,390,395,395};
	        g.fillPolygon(x3points, y3points, 4);
	        //Rope
	        int x4points[] = {150,155,155,150};
	        int y4points[] = {80,80,120,120};
	        g.fillPolygon(x4points, y4points, 4);
	        //Head
	        g.drawOval(113,115,80,80);
	        g.drawOval(114,116,79,79);
	        g.drawOval(115,117,80,80);
	        g.drawOval(116,118,80,80);
	        g.drawOval(117,119,80,80);
	        //Body
	        int x6points[] = {150,155,155,150};
	        int y6points[] = {200,200,300,300};
	        g.fillPolygon(x6points, y6points, 4);
	        //Left Leg 
	        int x7points[] = {120,150,155,125};
	        int y7points[] = {350,300,300,350};
	        g.fillPolygon(x7points, y7points, 4);
	        //Right Leg
	        int x8points[] = {155,185,180,150};
	        int y8points[] = {300,350,350,300};
	        g.fillPolygon(x8points, y8points, 4);
	        //Right Arm
	        int x9points[] = {155,185,185,155};
	        int y9points[] = {250,250,255,255};
	        g.fillPolygon(x9points, y9points, 4);
	        //Left Arm
	        int x10points[] = {120,150,150,120};
	        int y10points[] = {250,250,255,255};
	        g.fillPolygon(x10points, y10points, 4);      
	    }
	}   


